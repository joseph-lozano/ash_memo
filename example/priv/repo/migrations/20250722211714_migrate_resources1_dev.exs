defmodule Example.Repo.Migrations.MigrateResources1 do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:posts, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:content, :text)

      add(:created_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create table(:ash_memo_cache_entries, primary_key: false) do
      add(:cache_key, :text, null: false, primary_key: true)
      add(:value, :binary)
      add(:byte_size, :bigint, null: false)
      add(:inserted_at, :utc_datetime_usec, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:expires_at, :utc_datetime_usec)
      add(:accessed_at, :utc_datetime_usec, default: fragment("(now() AT TIME ZONE 'utc')"))
      add(:access_count, :bigint, default: 1)
    end

    create(index(:ash_memo_cache_entries, [:inserted_at, :accessed_at]))

    create(index(:ash_memo_cache_entries, [:expires_at]))
  end

  def down do
    drop_if_exists(index(:ash_memo_cache_entries, [:expires_at]))

    drop_if_exists(index(:ash_memo_cache_entries, [:inserted_at, :accessed_at]))

    drop(table(:ash_memo_cache_entries))

    drop(table(:posts))
  end
end
